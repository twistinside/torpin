name: Deploy CDK Stack

on:
  push:
    branches:
      - 'main'  # Triggers on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cache Swift Package Manager build artifacts
      - uses: actions/cache@v4
        with:
          path: ./lambda/.build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      # Step 3: Build Swift Lambda package
      - name: Build Swift Lambda package
        working-directory: ./lambda
        run: swift build

      # Step 4: Set up Node.js (needed for CDK)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest  # Use a specific version of Node.js

      # Step 5: Determine npm cache directory
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # Step 6: Cache npm dependencies
      - uses: actions/cache@v4
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 7: Install CDK globally
      - name: Install CDK
        run: npm install -g aws-cdk

      # Step 8: Install project dependencies (npm install)
      - name: Install dependencies
        working-directory: ./cdk
        run: npm install

      # Step 9: Configure AWS credentials for deployment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      # Step 10: Bootstrap the CDK environment (if needed)
      - name: Bootstrap CDK
        working-directory: ./cdk
        run: npx cdk bootstrap

      # Step 11: Deploy the CDK stack
      - name: Deploy CDK stack
        env:
          STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
        working-directory: ./cdk
        run: npx cdk deploy --require-approval never
        