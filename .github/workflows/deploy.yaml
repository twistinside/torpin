name: Torpin Service Lambda

on:
  push:
    branches:
      - 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Access cache for swift
      - name: Cache Swift build artifacts
        uses: actions/cache@v4
        with:
          path: |
             ./lambda/.
             !./lambda/.build/*/release/ModuleCache
          key: swift-build-${{ runner.os }}-${{ hashFiles('lambda/Package.resolved') }}
          restore-keys: |
            swift-build-${{ runner.os }}-

      # Step 3: Build the Swift Lambda
      - name: Build Swift Lambda
        working-directory: ./lambda
        run: swift build

      # Step 4: Package the Swift Lambda to a specific folder
      - name: Package Swift Lambda
        working-directory: ./lambda
        run: swift package archive --disable-sandbox plugin

      # Step 5: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Step 6: Access cache for npm
      - name: Cache CDK node_modules
        uses: actions/cache@v4
        with:
          path: ./cdk/node_modules
          key: cdk-node-modules-${{ runner.os }}-${{ hashFiles('cdk/package-lock.json') }}
          restore-keys: |
            cdk-node-modules-${{ runner.os }}-

      # Step 7: Install CDK dependencies
      - name: Install CDK Dependencies
        working-directory: ./cdk
        run: npm install

      # Step 8: Install CDK globally
      - name: Install CDK Globally
        run: npm install -g aws-cdk

      # Step 9: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      # Step 10: Bootstrap the CDK environment (if needed)
      - name: Bootstrap CDK
        working-directory: ./cdk
        run: npx cdk bootstrap

      # Step 11: Deploy the CDK Stack
      - name: Deploy CDK Stack
        env:
          STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
        working-directory: ./cdk
        run: npx cdk deploy --require-approval never
