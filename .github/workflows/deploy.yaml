name: Torpin Service Lambda

on:
  push:
    branches:
      - 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Swift Lambda archive
        id: lambda-cache
        uses: actions/cache@v4
        with:
          path: lambda/.build/plugins/AWSLambdaPackager/outputs/AWSLambdaPackager/
          key: swift-lambda-zip-${{ runner.os }}-${{ hashFiles('lambda/Package.resolved', 'lambda/Sources/**', 'lambda/Package.swift') }}
          restore-keys: |
            swift-lambda-zip-${{ runner.os }}-

      - name: Package Swift Lambda
        if: steps.lambda-cache.outputs.cache-hit != 'true'
        working-directory: ./lambda
        run: swift package archive --disable-sandbox plugin

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache CDK node_modules
        uses: actions/cache@v4
        with:
          path: cdk/node_modules
          key: cdk-node-modules-${{ runner.os }}-${{ hashFiles('cdk/package-lock.json') }}
          restore-keys: |
            cdk-node-modules-${{ runner.os }}-

      - name: Install CDK Dependencies
        working-directory: ./cdk
        run: npm install

      - name: Install CDK Globally
        run: npm install -g aws-cdk

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Bootstrap CDK
        working-directory: ./cdk
        run: npx cdk bootstrap

      - name: Deploy CDK Stack
        env:
          STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
          STEAM_ID: ${{ secrets.STEAM_ID }}
        working-directory: ./cdk
        run: npx cdk deploy --require-approval never

      - name: Install web Dependencies
        working-directory: ./astro
        run: npm install

      - name: Build web site
        working-directory: ./astro
        run: npm run build

      - name: Cache site
        id: web-cache
        uses: actions/cache@v4
        with:
          path: astro/dist
          key: web-dist-${{ runner.os }}-${{ hashFiles('astro/src/**', 'astro/public/**', 'astro/astro.config.*', 'astro/package.json') }}
          restore-keys: |
            web-dist-${{ runner.os }}-

      - name: Upload to Porkbun
        if: steps.web-cache.outputs.cache-hit != 'true'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: pixie-ftp.porkbun.com
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./astro/dist/
          dangerous-clean-slate: true
